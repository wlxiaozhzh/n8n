"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsiteScreenshot = void 0;
class WebsiteScreenshot {
    constructor() {
        this.description = {
            displayName: "Website Screenshot (Deprecated) (CustomJS)",
            name: "websiteScreenshot",
            icon: "file:customJs.svg",
            group: ["transform"],
            version: 1,
            description: "Take a screenshot of a website",
            defaults: {
                name: "Take a screenshot of a website",
            },
            inputs: ["main"],
            outputs: ["main"],
            credentials: [
                {
                    name: "customJsApi",
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: "Website Url",
                    name: "urlInput",
                    type: "string",
                    default: "",
                    description: "The url for taking screenshot",
                    required: true,
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        for (let i = 0; i < items.length; i++) {
            const credentials = await this.getCredentials("customJsApi");
            const urlInput = this.getNodeParameter("urlInput", i);
            const options = {
                url: `https://e.customjs.io/__js1-${credentials.apiKey}`,
                method: "POST",
                headers: {
                    "customjs-origin": "n8n/screenshot",
                    "x-api-key": credentials.apiKey,
                },
                body: {
                    input: urlInput,
                    code: "const { SCREENSHOT } = require('./utils'); return SCREENSHOT(input);",
                    returnBinary: "true",
                },
                encoding: null,
                json: true,
            };
            const response = await this.helpers.request(options);
            if (!response || (Buffer.isBuffer(response) && response.length === 0)) {
                // No binary data returned; emit only JSON without a binary property
                returnData.push({
                    json: items[i].json,
                });
                continue;
            }
            const binaryData = await this.helpers.prepareBinaryData(response, "output.png");
            returnData.push({
                json: items[i].json,
                binary: {
                    data: binaryData,
                },
            });
        }
        return [returnData];
    }
}
exports.WebsiteScreenshot = WebsiteScreenshot;
