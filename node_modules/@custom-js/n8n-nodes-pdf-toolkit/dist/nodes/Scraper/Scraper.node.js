"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scraper = void 0;
class Scraper {
    constructor() {
        this.description = {
            displayName: "Web Scraper for HTML Extraction and Screenshots (CustomJS)",
            name: "scraper",
            icon: "file:customJs.svg",
            group: ["transform"],
            version: 1,
            description: "A web scraper module to crawl websites and interact with page elements (clicks, typing, etc.). The module returns raw HTML of the visited page.",
            defaults: {
                name: "Scraper",
            },
            inputs: ["main"],
            outputs: ["main"],
            credentials: [
                {
                    name: "customJsApi",
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: "Website URL",
                    name: "url",
                    type: "string",
                    default: "",
                    description: "The website URL to scrape",
                    required: true,
                    modes: [
                        {
                            displayName: "By URL",
                            name: "url",
                            type: "string",
                            validation: [
                                {
                                    type: "regex",
                                    properties: {
                                        regex: "^https://",
                                        errorMessage: "URL must start with https://",
                                    },
                                },
                            ],
                            placeholder: "https://example.com",
                        },
                    ]
                },
                {
                    displayName: "User Actions",
                    name: "commands",
                    type: "fixedCollection",
                    typeOptions: {
                        multipleValues: true,
                    },
                    default: {},
                    options: [
                        {
                            name: "command",
                            displayName: "Command",
                            values: [
                                {
                                    displayName: "Type",
                                    name: "type",
                                    type: "options",
                                    options: [
                                        { name: "Click", value: "click" },
                                        { name: "Type", value: "type" },
                                        { name: "Wait", value: "wait" },
                                    ],
                                    default: "click",
                                    required: true,
                                },
                                {
                                    displayName: "Selector",
                                    name: "selector",
                                    type: "string",
                                    default: "",
                                    description: "Selector (e.g., .className, #id, name, placeholder, label, or button text)",
                                },
                                {
                                    displayName: "Value",
                                    name: "value",
                                    type: "string",
                                    default: "",
                                    description: "Value (for 'type' command)",
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: "Return Type",
                    name: "returnValueType",
                    type: "options",
                    options: [
                        { name: "Raw HTML", value: "text" },
                        { name: "Screenshot (PNG)", value: "binary" },
                    ],
                    default: "binary",
                    description: "Define whether you want to get a screenshot or a HTML response.",
                    required: true,
                },
                {
                    displayName: "Debug Mode",
                    name: "debug",
                    type: "boolean",
                    default: true,
                    description: "Specify if the operation should be canceled when the element is not found.",
                    required: true,
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        for (let i = 0; i < items.length; i++) {
            const credentials = await this.getCredentials("customJsApi");
            const url = this.getNodeParameter("url", i);
            if (!url.startsWith("https://")) {
                throw new Error("Website URL must start with https://");
            }
            const commandsRaw = this.getNodeParameter("commands", i, []);
            const returnValueType = this.getNodeParameter("returnValueType", i);
            const debug = this.getNodeParameter("debug", i);
            // Flatten commands array
            const commands = Array.isArray(commandsRaw.command) ? commandsRaw.command : [];
            const payload = {
                url,
                commands,
            };
            const options = {
                url: `https://e.customjs.io/__js1-${credentials.apiKey}`,
                method: "POST",
                headers: {
                    "customjs-origin": "n8n/scraper",
                    "x-api-key": credentials.apiKey,
                },
                body: {
                    input: JSON.stringify(payload),
                    code: `const { SCRAPER } = require('./utils'); ` +
                        `const payload = input; ` +
                        `return SCRAPER(payload.url, payload.commands || [], "${returnValueType === "binary" ? "image" : "html"}", ${debug ? "true" : "false"});`,
                    returnBinary: returnValueType === "binary" ? "true" : "false",
                },
                encoding: null,
                json: true,
            };
            const response = await this.helpers.request(options);
            if (returnValueType === "binary") {
                if (!response || (Buffer.isBuffer(response) && response.length === 0)) {
                    // No binary data returned; emit only JSON without a binary property
                    returnData.push({
                        json: items[i].json,
                    });
                    continue;
                }
                const binaryData = await this.helpers.prepareBinaryData(response, "output.png");
                returnData.push({
                    json: items[i].json,
                    binary: {
                        data: binaryData,
                    },
                });
            }
            else {
                returnData.push({
                    json: {
                        output: response.toString(),
                    },
                });
            }
        }
        return [returnData];
    }
}
exports.Scraper = Scraper;
