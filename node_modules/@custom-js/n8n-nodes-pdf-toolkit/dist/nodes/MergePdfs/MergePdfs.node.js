"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MergePdfs = void 0;
class MergePdfs {
    constructor() {
        this.description = {
            displayName: "Merge PDFs (CustomJS)",
            name: "mergePdfs",
            icon: "file:customJs.svg",
            group: ["transform"],
            version: 1,
            description: "Combine multiple PDF files into a single PDF. Perfect for reports, contracts, and document automation in n8n.",
            defaults: {
                name: "Merge PDF",
            },
            inputs: ["main"],
            outputs: ["main"],
            credentials: [
                {
                    name: "customJsApi",
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: "Resource",
                    name: "resource",
                    type: "options",
                    options: [
                        {
                            name: "Binary PDF",
                            value: "binary",
                        },
                        {
                            name: "URL",
                            value: "url",
                        },
                    ],
                    default: "binary",
                },
                {
                    displayName: "Data field name or URL array (seperate by comma)",
                    name: "field_name",
                    type: "string",
                    default: "data",
                    description: "The field names for binary PDF file or urls that indicate PDF files. Please make sure the size of PDf file doesn't exceed 6mb. If it's bigger, pass an array of URLs rather than binary file.",
                    required: true,
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const credentials = await this.getCredentials("customJsApi");
        const isBinary = this.getNodeParameter("resource", 0) === "binary";
        const field_name = this.getNodeParameter("field_name", 0);
        const files = isBinary ? items.map((item, i) => {
            var _a;
            if ((_a = item.binary) === null || _a === void 0 ? void 0 : _a.data) {
                return Buffer.from(item.binary.data.data, "base64");
            }
        }) : [];
        const urls = !isBinary ? field_name : [];
        const options = {
            url: `https://e.customjs.io/__js1-${credentials.apiKey}`,
            method: "POST",
            headers: {
                "customjs-origin": "n8n/mergePDFs",
                "x-api-key": credentials.apiKey,
            },
            body: {
                input: isBinary ? { files } : { urls },
                code: `
              const { PDF_MERGE } = require('./utils'); 
              input = [...input.files || [],...input.urls || []].filter(i => i); 
              return PDF_MERGE(input);`,
                returnBinary: "true",
            },
            encoding: null,
            json: true,
        };
        const response = await this.helpers.request(options);
        if (!response || (Buffer.isBuffer(response) && response.length === 0)) {
            // No binary data returned; emit only JSON without a binary property
            returnData.push({
                json: {},
            });
            return [returnData];
        }
        const binaryData = await this.helpers.prepareBinaryData(response, "output.pdf");
        returnData.push({
            json: {},
            binary: {
                data: binaryData,
            },
        });
        return [returnData];
    }
}
exports.MergePdfs = MergePdfs;
