"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetFormFieldNames = void 0;
class GetFormFieldNames {
    constructor() {
        this.description = {
            displayName: "Get PDF Form Fields (CustomJS)",
            name: "GetFormFieldNames",
            icon: "file:customJs.svg",
            group: ["transform"],
            version: 1,
            description: "Extract all form field names and types from a fillable PDF. Use it to identify which fields can be filled in your n8n workflows.",
            defaults: {
                name: "Get PDF Form Fields",
            },
            inputs: ["main"],
            outputs: ["main"],
            credentials: [
                {
                    name: "customJsApi",
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: "Resource",
                    name: "resource",
                    type: "options",
                    options: [
                        {
                            name: "Binary PDF",
                            value: "binary",
                        },
                    ],
                    default: "binary",
                },
                {
                    displayName: "Data field name",
                    name: "field_name",
                    type: "string",
                    default: "data",
                    description: "The field name for binary PDF file. Please make sure the size of PDf file doesn't exceed 6mb.",
                    required: true,
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const getFile = (field_name, i) => {
            var _a;
            const file = (_a = items[i].binary) === null || _a === void 0 ? void 0 : _a[field_name];
            if (!file) {
                throw new Error(`No binary data found in field "${field_name}" for item ${i}`);
            }
            return Buffer.from(file.data, "base64");
        };
        for (let i = 0; i < items.length; i++) {
            const credentials = await this.getCredentials("customJsApi");
            const field_name = this.getNodeParameter("field_name", i);
            const isBinary = this.getNodeParameter("resource", i) === "binary";
            const file = isBinary ? getFile(field_name, i) : "";
            if (!isBinary) {
                throw new Error(`Invalid binary data`);
            }
            const options = {
                url: `https://e.customjs.io/__js1-${credentials.apiKey}`,
                method: "POST",
                headers: {
                    "customjs-origin": "n8n/getFormFieldNames",
                    "x-api-key": credentials.apiKey,
                },
                body: {
                    input: { file: file },
                    code: `
              const { PDF_GET_FORM_FIELD_NAMES } = require('./utils'); 
              const pdfInput = input.file;
              return PDF_GET_FORM_FIELD_NAMES(pdfInput);`,
                    returnBinary: "false",
                },
                encoding: null,
                json: true,
            };
            const response = await this.helpers.request(options);
            returnData.push({
                json: {
                    output: JSON.parse(response.toString()),
                },
            });
        }
        return [returnData];
    }
}
exports.GetFormFieldNames = GetFormFieldNames;
